# Generated by Django 5.2.1 on 2025-05-21 13:07

import django.core.validators
import django.db.models.deletion
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
    ]

    operations = [
        migrations.CreateModel(
            name='Documento',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('nome_arquivo', models.CharField(help_text='Nome original do arquivo.', max_length=255, unique=True)),
                ('arquivo', models.FileField(help_text='Upload do arquivo PDF ou HTML.', upload_to='documentos/', validators=[django.core.validators.FileExtensionValidator(allowed_extensions=['pdf', 'html'])])),
                ('tipo_documento', models.CharField(choices=[('PDF', 'PDF'), ('HTML', 'HTML'), ('OUTRO', 'Outro')], default='OUTRO', help_text='Tipo do arquivo (PDF, HTML, etc.).', max_length=10)),
                ('data_upload', models.DateTimeField(auto_now_add=True, help_text='Data e hora do upload do documento.')),
                ('data_publicacao', models.DateField(blank=True, help_text='Data de publicação da norma (se aplicável).', null=True)),
                ('data_vigencia', models.DateField(blank=True, help_text='Data de início de vigência da norma (se aplicável).', null=True)),
                ('hierarquia', models.CharField(choices=[('CONSTITUICAO', 'Constituição'), ('LEI_FEDERAL', 'Lei Federal'), ('DECRETO_FEDERAL', 'Decreto Federal'), ('LEI_ESTADUAL', 'Lei Estadual'), ('DECRETO_ESTADUAL', 'Decreto Estadual'), ('LEI_MUNICIPAL', 'Lei Municipal'), ('RESOLUCAO', 'Resolução'), ('DECRETO_MUNICIPAL', 'Decreto Municipal'), ('PORTARIA', 'Portaria'), ('NORMA_TECNICA', 'Norma Técnica'), ('OUTRO', 'Outro'), ('NAO_APLICAVEL', 'Não Aplicável')], default='NAO_APLICAVEL', help_text='Nível hierárquico da norma legal (se aplicável).', max_length=50)),
                ('status', models.CharField(choices=[('VIGENTE', 'Vigente'), ('REVOGADO', 'Revogado'), ('PARCIALMENTE_REVOGADO', 'Parcialmente Revogado'), ('PENDENTE_ANALISE', 'Pendente de Análise')], default='PENDENTE_ANALISE', help_text='Status de vigência do documento (Vigente, Revogado, etc.).', max_length=30)),
                ('texto_completo_extraido', models.TextField(blank=True, help_text='Texto completo extraído do documento.', null=True)),
            ],
        ),
        migrations.CreateModel(
            name='Chunk',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('conteudo_original', models.TextField(help_text='O pedaço de texto original do documento.')),
                ('conteudo_tratado', models.TextField(help_text='O pedaço de texto após a aplicação das regras de antinomia.')),
                ('embedding', models.BinaryField(blank=True, help_text='O vetor de embedding do conteúdo tratado.', null=True)),
                ('ordem_no_documento', models.IntegerField(help_text='Ordem do chunk dentro do documento original.')),
                ('relevancia_antinomia', models.FloatField(default=0.0, help_text='Pontuação para indicar a relevância em relação a antinomias (0 a 1).')),
                ('data_revisao_antinomia', models.DateTimeField(blank=True, help_text='Data da última revisão manual ou automática da antinomia.', null=True)),
                ('is_valido_apos_antinomia', models.BooleanField(default=True, help_text='Indica se o chunk é válido após a resolução de antinomias.')),
                ('revogado_por_chunk', models.ForeignKey(blank=True, help_text='Referência a outro chunk que revoga este (se aplicável).', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='chunks_revogados', to='melchior.chunk')),
                ('documento', models.ForeignKey(help_text='Documento ao qual este chunk pertence.', on_delete=django.db.models.deletion.CASCADE, related_name='chunks', to='melchior.documento')),
            ],
            options={
                'ordering': ['documento', 'ordem_no_documento'],
                'unique_together': {('documento', 'ordem_no_documento')},
            },
        ),
    ]
